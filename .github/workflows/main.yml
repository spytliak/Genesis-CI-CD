name: GENESIS DevOps School

on:
  push: 
    branches:
      - main
  pull_request:
    branches:
      - main

  workflow_dispatch:

env:
  REGISTRY: spytliak/genesis-flask-rest-api

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: flake8 Lint
        uses: py-actions/flake8@v2

  build_and_push_docker:
    name: Build and push docker image
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      commit_hash: ${{ steps.commit_hash.outputs.commit_hash }}
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      - id: commit_hash
        run: echo "::set-output name=commit_hash::${GITHUB_SHA::7}"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}:${{ steps.commit_hash.outputs.commit_hash }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build_and_push_docker
    env:
      TF_LOG: OFF   # INFO, TRACE, DEBUG 
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TAG: ${{ needs.build_and_push_docker.outputs.commit_hash }}

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/project_GENESIS

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Python and pip 
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    # Install the latest version of Ansible (All actions use old version)
    - name: Setup Ansible
      run: pip install ansible --user

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.4
        terraform_wrapper: false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: tf_fmt
      run: terraform fmt -check
      continue-on-error: true

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: tf_init
      run: terraform init

    # Validates the configuration files in a directory
    - name: Terraform Validate
      id: tf_validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: tf_plan
      run: terraform plan -input=false

    # On push to "main", build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: tf_apply
      #if: github.ref == 'refs/heads/"ci/cd"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

    - name: Check project folder and ssh-key
      run: |
        ls -la .
        test -f genesis_ssh_key.pem || terraform output ssh_key > genesis_ssh_key.pem && chmod 600 genesis_ssh_key.pem

    - name: Run playbook
      id: playbook
      run: |
        cd ../../ansible
        ansible-playbook -i ./inventory/hosts.ini ./playbooks/genesis_app.yml -v

